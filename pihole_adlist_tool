#!/bin/bash

# define path to pihole's databases and temporary database
TEMP_DB="/tmp/temp.db"
PIHOLE_ROOT="/etc/pihole"
PIHOLE_FTL="file:$PIHOLE_ROOT/pihole-FTL.db?mode=ro"
GRAVITY="file:$PIHOLE_ROOT/gravity.db"


#define and initialize variables
declare -i DAYS_REQUESTED=30
declare -i TIMESTAMP_REQUESTED
declare -i TIMESTAMP_FIRST_QUERY
declare -i TIMESTAMP_LAST_QUERY
declare -i TIMESTAMP_FIRST_ANALYZED
DATE_REQUESTED=
DATE_FIRST_QUERY=
DATE_FIRST_ANALYZED=
DATE_LAST_QUERY=
declare -i FTL_ID
TOP=0
SORT=
NUM_DOMAINS_BLOCKED=
HITS_TOTAL=
SORT_ORDER=
NUM_ADLISTS=
NUM_ADLISTS_ENABLED=
NUM_GRAVITY_UNIQUE_DOMAINS=
NUM_DOMAINS_BLOCKED_CURRENT=
HITS_TOTAL_CURRENT=
BLACKLIST_GRAVITY=
UNIQUE=0
NUM_TOTAL_UNIQUE_DOMAINS=
declare -a adlist_conf_old_enabled
declare -a adlist_conf_unique_enabled
declare -i menu_selection

#for text formating
bold=$(tput bold)
normal=$(tput sgr0)

# help message
print_help() {
  echo "Usage: pihole_adlist_tool [options]
    
    Options:
    -d [Num]                         Consider the last [Num] days (Default: 30). Enter 0 for all-time analysis.
    -t [Num]                         Show top blocked domains. [Num] defines the number to show.
    -s [total/covered/hits/unique]   Set sorting order to total (total domains), covered (domains covered), hits (hits covered) or unique (covered unique domains) DESC. (Default sorting: id ASC)
    -u                               Show covered unique domains
    -h                               Show this help dialog
"
}

#convert timestamp to date

timestamp2date () {
    local DATE=$(date -d @$1 +%d.%m.%Y%t%k:%M:%S)
    echo "$DATE"
}


# calculate timestamps

set_timestamps () {

    TIMESTAMP_FIRST_QUERY=$(sqlite3 $PIHOLE_FTL "SELECT MIN(timestamp) FROM queries;") 
    TIMESTAMP_LAST_QUERY=$(sqlite3 $PIHOLE_FTL "SELECT MAX(timestamp) FROM queries;")
    if [ "$DAYS_REQUESTED" = 0 ];
        then
            TIMESTAMP_REQUESTED=$TIMESTAMP_FIRST_QUERY
        else
            TIMESTAMP_REQUESTED=$(date +%s)
            TIMESTAMP_REQUESTED=$TIMESTAMP_REQUESTED-86400*${DAYS_REQUESTED}
    fi
    TIMESTAMP_FIRST_ANALYZED=$(sqlite3 $PIHOLE_FTL "SELECT min(timestamp) FROM queries WHERE timestamp>=$TIMESTAMP_REQUESTED;")
}

# converts dates

set_dates () {
    DATE_FIRST_QUERY="$(timestamp2date $TIMESTAMP_FIRST_QUERY)"
    DATE_LAST_QUERY="$(timestamp2date $TIMESTAMP_LAST_QUERY)"
    DATE_REQUESTED="$(timestamp2date $TIMESTAMP_REQUESTED)"
    DATE_FIRST_ANALYZED="$(timestamp2date $TIMESTAMP_FIRST_ANALYZED)"
    
}


# removes temporary database
remove_temp_database () {
echo
echo -e "[i]  Removing temporary database..." 
rm -f $TEMP_DB
echo -e "[✓]  Temporary database removed\n"
}

# cleanup on trap
cleanup_on_trap () {
echo -e "\n\n[✗]  ${bold}User-abort detected!${normal}"
remove_temp_database
exit 1
}


trap cleanup_on_trap INT

# getopts flags and assing arguments to variables
while getopts 'd:t:s:uh' flag; do
  case "${flag}" in
    d) DAYS_REQUESTED="${OPTARG}" ;;
    t) TOP="${OPTARG}" ;;
    s) SORT="${OPTARG}" ;;
    u) UNIQUE=1 ;;
    h) print_help
        exit 0 ;;
    *) print_help
        exit 1 ;;
  esac
done

### warm-up ######

warm_up() {

echo -e "\n ++++++++ Selected options ++++++++\n"

# exit if $DAYS_REQUESTED is no digit
case "$DAYS_REQUESTED" in
    ''|*[0-9]*) ;;
    *) print_help
        exit 1 ;;
esac


# print number of requested days

if [ "$DAYS_REQUESTED" = 0 ];
    then
        echo -e "[i]  Days to analyze: all time"
    else
        echo -e "[i]  Days to analyze: $DAYS_REQUESTED"
fi 

# exit if $TOP is no digit
case "$TOP" in
    ''|*[0-9]*)     
          echo -e "[i]  Number of top domains to display: $TOP";;
    *) print_help
        exit 1 ;;
esac


# set sort order for adlist table based on $SORT

case "$SORT" in
    total)      SORT_ORDER="total_domains DESC" 
                echo -e "[i]  Sorting by: number of total domains descending";;
    domains)    SORT_ORDER="domains_covered DESC" 
                echo -e "[i]  Sorting by: number of unique domains covered descending";;
    hits)       SORT_ORDER="hits_covered DESC" 
                echo -e "[i]  Sorting by: number of hits covered descending";;
    unique)     SORT_ORDER="unique_domains_covered DESC" 
                echo -e "[i]  Sorting by: number of unique domains covered descending";;
    *)          SORT_ORDER="id ASC" 
                echo -e "[i]  Sorting by: adlist id ascending";;
esac

# print if unique covered domains should be shown
if [ "$UNIQUE" -eq 1 ]; 
    then 
        echo -e "[i]  Show unique covered domains: yes\n"
    else
        echo -e "[i]  Show unique covered domains: no\n"
fi       

echo -e " ++++++++++++++++++++++++++++++++++\n\n"
}



#### Program starts #####


echo
echo
echo "    ${bold}*** Pihole Adlist Tool ***${normal}"
echo

warm_up



# calculate various timestamps, converts them to dates
set_timestamps
set_dates

# get FTL_ID based on $TIMESTAMP_REQUESTED
FTL_ID=$(sqlite3 $PIHOLE_FTL "SELECT MIN(id) FROM queries WHERE timestamp>=$TIMESTAMP_REQUESTED;")



# Print timestamp warnings
if [ "$TIMESTAMP_REQUESTED" -gt "$TIMESTAMP_LAST_QUERY" ];
    then
        echo
        echo "[i]  ${bold}Warning:${normal} You requested to analyze the last "${DAYS_REQUESTED}" day(s) (starting from "$DATE_REQUESTED"), but last query is from "$DATE_LAST_QUERY""
        echo "[i]  Nothing to do here. Exiting " 
        echo
        exit 0
fi

if [ "$TIMESTAMP_REQUESTED" -lt "$TIMESTAMP_FIRST_QUERY" ];
    then 
        echo
        echo -e "[i]  ${bold}Warning:${normal} You requested to analyze the last "${DAYS_REQUESTED}" days (starting from "$DATE_REQUESTED"), but oldest query is from "$DATE_FIRST_QUERY". Using this instead\n" 
        echo
fi


# save old adlist_configuration 
adlist_conf_old_enabled=(`sqlite3 $GRAVITY "select id from adlist where enabled=1;"`)

echo "Would you like to analyze your current adlist configuration or first enable all adlists (current can be restored later)?"
echo
echo "1)  Current adlist configuration" 
echo "2)  Enable all adlists (runs pihole -g)"
echo

while [[ $menu_selection != [12] ]]; do
  read -p "Please select: " menu_selection
done
echo
echo

if [ "$menu_selection" -eq 1 ]; then
    echo "[i]  Keeping current adlist configuration"
fi


if [ "$menu_selection" -eq 2 ]; then

    echo "[i]  Enabling all adlists...."
    sudo sqlite3 $GRAVITY "UPDATE adlist SET enabled=1;"
    echo
    echo
    echo "[i]  Starting gravity"
    echo
    pihole -g
    echo 
    echo "[✓]  Gravity update finished"
    echo
    echo
    echo
fi

echo
echo
echo "[i]  Calculating....."
echo "[i]  This might take some time - please be patient."
#
#
#

# Database manipulation
# To analyze the data this tool creates a temporary database using data provided by pihole-ftl.db and gravity.db
# timeout is set to 5000 ms in which sqlite tries to open an locked database
#
#
# table blocked_domains selects all domains from pihole-ftl.db that that are also found in gravity.db. Depending on -d n this is limited to the last n days (gets all domains that would have been blocked)
# table adlist copies id, enable, address from gravity.adlist
# 
# table gravity_strip selects all domains and adlist_ids from gravitiy.db for which it finds corresponding domains in blocked_domains table (strips gravity to domains which could have been blocked)
# table blacklist_gravity contains all domains that are on the blacklist and also found in an adlist (aka gravity_strip)

# table unique_domains contains all domains from gravity_strip that are found just on one adlist (covered unique domains)
# table adlist is updated with the sum of domains for each id it finds a corresponding id in gravity_strip (counts how many domains this adlist whould have covered if used alone)
# table adlist is updated with the sum of hits for all domains for each id when it finds a corresponding id in gravity_strip (counts how many hits this adlist whould have covered if used alone)
# table adlist is updated with the number of unique_domains for each adlist id (number of unique domains covered by each adlist)
# table blacklist_gravity is updated with the number of hits for each domain found in blocked_domains

sqlite3 -cmd ".timeout 5000" $TEMP_DB << EOF
    create table blocked_domains (domain TEXT,hits INTEGER);
    create table adlist (id INTEGER, enabled INTEGER, address TEXT, total_domains INTEGER, domains_covered INTEGER, hits_covered INTEGER, unique_domains_covered INTEGER);
    create table gravity_strip (domain TEXT,adlist_id INTEGER);
    create table blacklist_gravity(domain TEXT, hits INTEGER);
    create table unique_domains(domain TEXT, adlist_id INTEGER);
    
    ATTACH DATABASE "${PIHOLE_FTL}" AS pihole_ftl_db;
    ATTACH DATABASE "${GRAVITY}?mode=ro" AS gravity_db;

    INSERT INTO blocked_domains(domain, hits) SELECT domain, COUNT(domain) FROM pihole_ftl_db.queries WHERE EXISTS (select 1 from gravity_db.gravity where gravity.domain=queries.domain) AND id>=${FTL_ID} GROUP BY domain ORDER BY COUNT(domain) DESC;
    

    INSERT INTO adlist (id, enabled, address) SELECT id, enabled, address FROM gravity_db.adlist ORDER BY adlist.id; 
    
    INSERT INTO gravity_strip(domain,adlist_id) SELECT gravity_db.gravity.domain, gravity_db.gravity.adlist_id FROM gravity JOIN blocked_domains ON blocked_domains.domain = gravity.domain;
    INSERT INTO blacklist_gravity(domain) SELECT gravity_strip.domain FROM gravity_strip JOIN gravity_db.domainlist on gravity_strip.domain=gravity_db.domainlist.domain WHERE type==1 GROUP BY gravity_strip.domain;

    
    
    
    INSERT INTO unique_domains(domain, adlist_id) SELECT domain, adlist_id FROM gravity_strip GROUP BY domain HAVING COUNT(domain)==1 order by adlist_id asc;
    UPDATE adlist SET domains_covered=(select count(domain) FROM gravity_strip WHERE id== adlist_id GROUP BY adlist_id);
    UPDATE adlist SET hits_covered=(SELECT SUM(blocked_domains.hits) FROM gravity_strip JOIN blocked_domains ON gravity_strip.domain == blocked_domains.domain WHERE id== adlist_id Group by adlist_id);
    UPDATE adlist SET unique_domains_covered=(SELECT COUNT(domain) FROM unique_domains WHERE adlist_id==id GROUP BY adlist_id);
    UPDATE blacklist_gravity SET hits=(SELECT blocked_domains.hits FROM blocked_domains WHERE blocked_domains.domain=blacklist_gravity.domain);

    DETACH DATABASE gravity_db;
    DETACH DATABASE pihole_ftl_db;
.exit
EOF


# Table adlist is updated with total number of domains for each id (adlist)
# Since commit 73963fecda6dc65b10d1dd3e43a5931dc531304a to pihole's core, locally saved adlist copies contain the adlist_id in the filename.
# We can use that to count the lines in each file and use the adlist_id to attribute it to the corresponding adlist in TEMP_DB
# This is faster than to count the domains for each adlist from gravity_db
# We use the new method only if the commit is found in the local git log to ensure that the new filename schema is used



if git -C /etc/.pihole/ log 2> /dev/null |grep -q 73963fecda6dc65b10d1dd3e43a5931dc531304a; then
        grep -c . /etc/pihole/list* |awk -F '[.:]' '{print $2 " "$NF}' | while read adlist_id count; do
             sqlite3 $TEMP_DB "UPDATE adlist SET total_domains="${count}" WHERE id="${adlist_id}";"
        done
    else
        sqlite3 -separator " " $GRAVITY "SELECT adlist_id,count(domain) FROM gravity GROUP BY adlist_id;" | while read adlist_id count; do
            sqlite3 $TEMP_DB "UPDATE adlist SET total_domains="${count}" WHERE id="${adlist_id}";"
        done
fi





# get some statistics
read NUM_DOMAINS_BLOCKED HITS_TOTAL <<<$(sqlite3 -separator " " $PIHOLE_FTL "SELECT COUNT(DISTINCT domain),count (domain) FROM queries WHERE id>=${FTL_ID} AND status == 1;")

NUM_ADLISTS=$(sqlite3 $TEMP_DB "SELECT COUNT(id) FROM adlist;")
NUM_ADLISTS_ENABLED=$(sqlite3 $TEMP_DB "SELECT COUNT(id) FROM adlist WHERE enabled==1;")
NUM_GRAVITY_UNIQUE_DOMAINS=$(sqlite3 $GRAVITY "SELECT value FROM info WHERE property == 'gravity_count';")
NUM_DOMAINS_BLOCKED_CURRENT=$(sqlite3 $TEMP_DB "SELECT COUNT(domain) FROM blocked_domains;")
HITS_TOTAL_CURRENT=$(sqlite3 $TEMP_DB "SELECT SUM(hits) FROM blocked_domains;")
BLACKLIST_GRAVITY=$(sqlite3 $TEMP_DB "SELECT COUNT(*) FROM blacklist_gravity;")
NUM_TOTAL_UNIQUE_DOMAINS=$(sqlite3 $TEMP_DB "SELECT COUNT(*) FROM unique_domains;")



echo
echo "[i]  You have ${bold}"$NUM_ADLISTS" adlists${normal} configured ("$NUM_ADLISTS_ENABLED" enabled)" 
echo "[i]  Your gravity.db contains ${bold}"$NUM_GRAVITY_UNIQUE_DOMAINS" unique domains${normal}"
echo "[i]  Since "$DATE_FIRST_ANALYZED" ${bold}"$NUM_DOMAINS_BLOCKED" different domains${normal} from your adlists have been blocked ${bold}"$HITS_TOTAL" times${normal} in total"
echo "[i]  Using you current adlist configuration ${bold}"$NUM_DOMAINS_BLOCKED_CURRENT" domains${normal} would have been blocked ${bold}"$HITS_TOTAL_CURRENT" times${normal}"
echo
echo
echo
read -p "Press enter to continue..."

if [ "$BLACKLIST_GRAVITY" -ne 0 ]; then
    echo
    echo
    echo "[i]  ${bold}You hit a special case${normal}" 
    echo "     Your personal blacklist contains at least one domain that is also on an adlist" 
    echo "     and has been requested in the selected time period. If pihole blocked it"
    echo "     (because blacklist was enabled at the time of the request) it got a special" 
    echo "     status ('blocked by blacklist' instead of 'blocked by gravity') and is NOT counted"
    echo "     on the above number of blocked domains/hits. As the domain is on an" 
    echo "     adlist the number of potentially blocked domains/hits is therefore is higher."
    echo
    echo
    sqlite3 -column -header $TEMP_DB "SELECT * FROM blacklist_gravity"
    echo
    echo "[i]  Use 'pihole -q DOMAIN' to see which adlist(s) contains the requested domain"
    echo
    echo
    echo
    read -p "Press enter to continue..."
fi


echo
echo
# prints n top potentially blocked domains based on -t argument
if [ "$TOP" = 0 ]; then :
    else
        echo 
        echo "[i]  ${bold}Top blocked adlist domains${normal}"
        echo "     Those would have been the ${bold}"$TOP" top blocked adlist domains${normal} since "$DATE_FIRST_ANALYZED""
        echo "     using your current adlist configuration"
        echo
        sqlite3 -column -header $TEMP_DB "SELECT domain, hits FROM blocked_domains LIMIT "${TOP}";"
        echo
        echo
        echo
        echo
        read -p "Press enter to continue..."
fi
    
echo
echo

echo "[i]  ${bold}Adlist coverage${normal}"
echo
echo

# prints the adlist table, sorting depends on -s argument
sqlite3 -column -header $TEMP_DB "SELECT id, enabled, total_domains, domains_covered, hits_covered, unique_domains_covered, address FROM adlist ORDER BY ${SORT_ORDER};"

echo
echo
echo
echo "[i]  Domains from disabled adlists are not stored in gravity's database." 
echo "     If you want to include them in the analysis, run this script again and select 'Enable all adlists'"
echo "     As the same domains usually appears on more than one adlist the sum of covered domains from this table is greater "
echo "     than the number of calculated blocked domains shown above"
echo
echo
echo "[i]  In total your adlists contain ${bold}"$NUM_TOTAL_UNIQUE_DOMAINS" visited (covered) unique domains${normal} - meaning those domains are contained only in a single adlist. "
echo
echo


# save adlist unique_configuration 
adlist_conf_unique_enabled=(`sqlite3 $TEMP_DB "select id from adlist where unique_domains_covered IS NOT NULL;"`)

if [ "$menu_selection" -eq 1 ]; 
    then
        menu_selection=
        echo "Would you like to keept your adlist configurartion, or keep only adlists enabled with at least one unique covered domain?"
        echo
        echo "1)  Keep adlist configuration" 
        echo "2)  Enable only adlists with covered unique domains"
        echo
        while [[ $menu_selection != [12] ]]; do
          read -p "Please select: " menu_selection
        done
        if [ "$menu_selection" -eq 1 ]; then
            echo            
            echo "[i] Keeping current adlist configuration"
        fi

    else
        menu_selection=
        echo "Would you like to keep all adlists enabled, keep only adlists enabled with at least one unique covered domain, or revert to your previous adlist configurartion?"
        echo
        echo "1)  Keep all adlists enabled" 
        echo "2)  Enable only adlists with covered unique domains"
        echo "3)  Restore previous adlist configuration"
        echo
        while [[ $menu_selection != [123] ]]; do
          read -p "Please select: " menu_selection
        done
        if [ "$menu_selection" -eq 1 ]; then
            echo            
            echo "[i] Keeping all adlists enabled"
        fi
fi

if [ "$menu_selection" -eq 2 ]; then
    
    echo "[i]  Enabling adlists with covered unique domains...."
    sudo sqlite3 $GRAVITY "UPDATE adlist SET enabled=0;"
    for adlist_id in "${adlist_conf_unique_enabled[@]}"; do
       sudo  sqlite3 $GRAVITY "UPDATE adlist SET enabled=1 where id=$adlist_id;"
    done
    pihole restartdns reload-lists    
    echo
    echo "[✓]  Adlists with covered unique domains enabled"
    echo
fi

if [ "$menu_selection" -eq 3 ]; then

    echo "[i]  Restoring previous adlist configuration...."
    sudo sqlite3 $GRAVITY "UPDATE adlist SET enabled=0;"
    for adlist_id in "${adlist_conf_old_enabled[@]}"; do
       sudo sqlite3 $GRAVITY "UPDATE adlist SET enabled=1 where id=$adlist_id;"
    done
    pihole restartdns reload-lists    
    echo
    echo "[✓]  Previous adlist configuration restored"
    echo
fi


if [ "$UNIQUE" = 1 ];
    then 
        echo
        echo        
        read -p "Press enter to continue (show covered unique domains)..."
        echo
        echo
        echo "[i]  ${bold}Covered unique domains${normal}"
        echo
        sqlite3 -column -header $TEMP_DB "SELECT domain, adlist_id, address FROM unique_domains JOIN adlist WHERE adlist_id=id;"
        echo
        echo
fi

remove_temp_database


